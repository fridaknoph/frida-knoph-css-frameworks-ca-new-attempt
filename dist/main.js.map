{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A,Y,C;A,M,C,c,C,c,E,Y,E;I,K,E,I;C,C,C;A,c,C,O,G,K,C,C;A,S,6B,C,I,E;I,O,6B,G,U,I,O,M,I,Q,I,O,M,C,Q,G,S,G,E;Q,O,O,G,C;K,G,S,G,E;Q,O,G,I,U,I,O,M,I,G,C,W,K,M,I,G,K,M,C,S,G,Q,G,O,G,C;K,E,6B,C,I,C,C;C;A,S,8C,C,Y,E;I,I,O,O,K,U,E,O,I,C;I,I,iB,G,I,O,E,A;I,I,gB,G,I,O,E,A;I,O,A,C,8C,G,S,wB,C,W,E;Q,O,W,G,gB,G,iB,C;K,C,C,Y,C,C;C;A,S,6C,C,G,E,W,E;I,I,C,W,I,G,I,G,C,U,E,O,G,C;I,I,G,K,I,I,6B,C,G,C,K,Q,I,O,G,K,U,E,O;Q,O,E,G;K,C;I,I,K,G,8C,C,W,C,A;I,I,K,I,K,C,G,C,G,C,E,O,K,C,G,C,G,C,C;I,I,M,G,E,A;I,I,qB,G,M,C,c,I,M,C,wB,A;I,I,I,G,I,G,C,I,G,K,S,I,M,C,S,C,c,C,I,C,G,E,G,C,E;Q,I,I,G,qB,G,M,C,wB,C,G,E,G,C,G,I,A;Q,I,I,I,C,I,C,G,I,I,C,G,C,A,E,M,C,c,C,M,E,G,E,I,C,C;a,M,C,G,C,G,G,C,G,C,C;K;I,M,C,O,G,G,C;I,I,K,E,K,C,G,C,G,E,M,C,C;I,O,M,C;C;;AAAA,IAAMA,qCAAe,GAAG,SAAlBA,eAAkB,CAAAC,WAAW,EAAI;IACrC,IAAIA,WAAW,IAAIA,WAAW,YAAYC,QAA1C,EACE,OAAA,CAAA,OAAA,EAAA,CAAA,IAAA;eAAA,gBAAA;YAAA,cAAA;QAAA,OAAA,6CAAA,KAAA,CAAA;KAAA,EAAqBC,IAArB,CAA0B,SAAA,IAAA,EAAiD;QAAA,IAA9CC,MAA8C,GAAA,IAAA,CAA9CA,MAA8C,EAAtCC,MAAsC,GAAA,IAAA,CAAtCA,MAAsC,EAA9BC,MAA8B,GAAA,IAAA,CAA9BA,MAA8B,EAAtBC,MAAsB,GAAA,IAAA,CAAtBA,MAAsB,EAAdC,OAAc,GAAA,IAAA,CAAdA,OAAc,AAAA;QACzEJ,MAAM,CAACH,WAAD,CAAN,CAAAG;QACAC,MAAM,CAACJ,WAAD,CAAN,CAAAI;QACAC,MAAM,CAACL,WAAD,CAAN,CAAAK;QACAC,MAAM,CAACN,WAAD,CAAN,CAAAM;QACAC,OAAO,CAACP,WAAD,CAAP,CAAAO;KALF,CAMC,CAAA;CARL,AAUC;AAEcR,IAAAA,8BAAAA,GAAAA,qC,AAAAA;A,c,C,O,G,8B,C;;;;;A,Y,C;A,S,6B,C,I,E;I,O,6B,G,U,I,O,M,I,Q,I,O,M,C,Q,G,S,G,E;Q,O,O,G,C;K,G,S,G,E;Q,O,G,I,U,I,O,M,I,G,C,W,K,M,I,G,K,M,C,S,G,Q,G,O,G,C;K,E,6B,C,I,C,C;C;A,M,C,c,C,c,E,Y,E;I,K,E,I;C,C,C;A,c,C,O,G,8B,C;;ACZf,IAAA,4BAAA,GAAA,4CAAA,CAAA,YAAA,CAAA,AAAA;;AACA,IAAA,kCAAA,GAAA,6CAAA,CAAA,kBAAA,CAAA,AAAA;;A,I,qC,A;A,S,8C,C,Y,E;I,I,O,O,K,U,E,O,I,C;I,I,iB,G,I,O,E,A;I,I,gB,G,I,O,E,A;I,O,A,C,8C,G,S,wB,C,W,E;Q,O,W,G,gB,G,iB,C;K,C,C,Y,C,C;C;A,S,6C,C,G,E,W,E;I,I,C,W,I,G,I,G,C,U,E,O,G,C;I,I,G,K,I,I,6B,C,G,C,K,Q,I,O,G,K,U,E,O;Q,O,E,G;K,C;I,I,K,G,8C,C,W,C,A;I,I,K,I,K,C,G,C,G,C,E,O,K,C,G,C,G,C,C;I,I,M,G,E,A;I,I,qB,G,M,C,c,I,M,C,wB,A;I,I,I,G,I,G,C,I,G,K,S,I,M,C,S,C,c,C,I,C,G,E,G,C,E;Q,I,I,G,qB,G,M,C,wB,C,G,E,G,C,G,I,A;Q,I,I,I,C,I,C,G,I,I,C,G,C,A,E,M,C,c,C,M,E,G,E,I,C,C;a,M,C,G,C,G,G,C,G,C,C;K;I,M,C,O,G,G,C;I,I,K,E,K,C,G,C,G,E,M,C,C;I,O,M,C;C;A,S,4C,C,G,E;I,O,G,I,G,C,U,G,G,G;Q,O,E,G;K,C;C;A,S,4C,C,O,E,G,E;I,I,C,G,E,G,G,O,C,K,C,C,C,C;I,O,M,C,M,C,M,C,gB,C,O,E;Q,G,E;Y,K,E,M,C,M,C,G,C;S;K,C,C,C;C;A,S,wC,C,G,E,O,E,M,E,K,E,M,E,G,E,G,E;I,I;Q,I,I,G,G,C,G,C,C,G,C,A;Q,I,K,G,I,C,K,A;K,C,O,K,E;Q,M,C,K,C,C;Q,O;K;I,I,I,C,I,E,O,C,K,C,C;S,O,C,O,C,K,C,C,I,C,K,E,M,C,C;C;A,S,uC,C,E,E;I,O,W;Q,I,I,G,I,E,I,G,S,A;Q,O,I,O,C,S,O,E,M,E;Y,I,G,G,E,C,K,C,I,E,I,C,A;Y,S,K,C,K,E;gB,wC,C,G,E,O,E,M,E,K,E,M,E,M,E,K,C,C;a;Y,S,M,C,G,E;gB,wC,C,G,E,O,E,M,E,K,E,M,E,O,E,G,C,C;a;Y,K,C,S,C,C;S,C,C;K,C;C;AAIA,IAAMS,4BAAM,GAAG,4CAAf,AAAA;AAEA,IAAMC,4BAAM,GAAG,IAAIC,kCAAAA,CAAAA,OAAJ,CAAiB;IAC9BC,GAAG,EAAEH,4BADyB;IAE9BI,KAAK,EAAE,IAAIC,kCAAAA,CAAAA,aAAJ,EAAPD;CAFa,CAAf,AAAgC;AAKFE,SAAAA,8B,GAAAA;I,O,+B,C,K,C,I,E,S,C,C;C;A,S,+B,G;IAAf,+BAAA,GAAA,uCAAA,CAAA,aAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,SAAA,OAAA,GAAA;QAAA,IAAA,IAAA,AAAA;QAAA,OAAA,kBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;YAAA,MAAA,IAAA,CAAA,OAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;gBAAA,KAAA,CAAA;oBAAA,QAAA,CAAA,IAAA,GAAA,CAAA,CAAA;oBAAA,OACML,4BAAM,CAACM,KAAP,CAAa;wBAC9BA,KAAK,EAAA,AAAA,CAAA,GAAEC,kCAAAA,CAAAA,GAAF,CAAA,CAALD,qCAAAA,IAAAA,CAAAA,qCAAAA,GAAAA,4CAAAA,CAAAA;4BAAAA,qMAAAA;yBAAAA,CAAAA,CAAAA,AAAAA,CAAAA;qBADiB,CADN,CACmB;gBADnB,KAAA,CAAA;oBACPE,IADO,GACPA,QAAAA,CAAAA,IAAAA,CAAAA;gBADO,KAAA,CAAA,CAAA;gBAAA,KAAA,KAAA;oBAAA,OAAA,QAAA,CAAA,IAAA,EAAA,CAAA;aAAA;SAAA,EAAA,OAAA,CAAA,CAAA;K,CAAA,CAAA,CAAA;I,O,+B,C,K,C,I,E,S,C,C;C;;;;A;A,Y,C;;ACZf,IAAA,4BAAA,GAAA,4CAAA,CAAA,YAAA,CAAA,AAAA;;AACA,IAAA,6BAAA,GAAA,4CAAA,CAAA,qBAAA,CAAA,AAAA;;;AAEA,IAAA,sCAAA,GAAA,4CAAA,CAAA,wBAAA,CAAA,AAAA;;;A,Y,C;A,M,C,c,C,yB,E,Y,E;I,K,E,I;C,C,C;A,yB,C,M,G,K,C,C;;ACHA,IAAA,kCAAA,GAAA,4CAAA,CAAA,kBAAA,CAAA,AAAA;A,S,4C,C,G,E;I,O,G,I,G,C,U,G,G,G;Q,O,E,G;K,C;C;AAEA,IAAA,kCAAA,OAAA,2CAAA,GAAA,kCAAA,CACES,iBADF,EACEA,uCADF,GAAA,2CAAA,KAAA,KAAA,CAAA,GACsB,4CADtB,GAAA,2CAAA,EAAA,4CAAA,GAAA,kCAAA,CAEEC,kBAFF,EAEEA,wCAFF,GAAA,4CAAA,KAAA,KAAA,CAAA,GAEuB,4CAFvB,GAAA,4CAAA,AAAA;AAKO,IAAMlB,4BAAM,GAAG,IAAIC,kCAAAA,CAAAA,OAAJ,CAAiB;IACrCkB,OAAO,EAAE;QACPC,aAAa,EAAA,SAAA,CAAA,MAAA,CAAYH,uCAAZ,CAAbG;KAFmC;IAIrClB,GAAG,EAAEgB,wCAALhB;CAJoB,CAAf,AAAgC;A,yB,C,M,G,4B,C;;;;ADDvC,IAAA,+BAAA,GAAA,4CAAA,CAAA,wBAAA,CAAA,AAAA;;A,S,4C,C,G,E;I,O,G,I,G,C,U,G,G,G;Q,O,E,G;K,C;C;AAGA,IAAMO,0BAAI,GAAGC,6BAAAA,CAAAA,OAAAA,CAASC,UAAT,CAAoBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB,CAAb,AAAA;AACAJ,0BAAI,CAACK,MAAL,eACE,iCAAC,4BAAA,CAAA,OAAA,CAAM,UAAP;cACE,cAAA,iCAAA,kCAAA;QAAgB,MAAA,EAAQd,gCAAD;kBACrB,cAAA,iCAAN,+BAAA,CAAA,OAAA;;;;qBAAA;;;;;iBACA;;;;;aAJA,EAOEY,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAPF,CAAA,C,CAUA,0EALA;AAMA,6DAAA;AACA,0EAAA;AACA,CAAA,GAAA,sCAAA,CAAA,OAAA,CAAA,EAAA,CAAA","sources":["src/reportWebVitals.js","src/pages/HomePage.js","src/index.js","src/utils/client.js"],"sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ApolloClient, { gql } from \"apollo-boost\";\r\nimport { InMemoryCache } from \"apollo-boost\";\r\nimport { useQuery } from \"@apollo/client\";\r\n\r\nconst gqlUrl = \"https://countries.trevorblades.com/graphql\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: gqlUrl,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport default async function HomePage() {\r\n  const json = await client.query({\r\n    query: gql`\r\n      {\r\n        country(code: \"AR\") {\r\n          name\r\n          native\r\n          capital\r\n          currency\r\n          languages {\r\n            name\r\n          }\r\n        }\r\n      }\r\n    `,\r\n  });\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { render } from \"react-dom\";\nimport { client } from \"./utils/client\";\nimport HomePage from \"./pages/HomePage.js\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <HomePage />\n    </ApolloProvider>\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import ApolloClient from \"apollo-boost\";\r\n\r\nconst {\r\n  REACT_APP_API_KEY = \"https://countries.trevorblades.com/graphql\",\r\n  REACT_APP_ENDPOINT = \"https://countries.trevorblades.com/graphql\",\r\n} = process.env;\r\n\r\nexport const client = new ApolloClient({\r\n  headers: {\r\n    Authorization: `Apikey ${REACT_APP_API_KEY}`,\r\n  },\r\n  uri: REACT_APP_ENDPOINT,\r\n});\r\n"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","gqlUrl","client","ApolloClient","uri","cache","InMemoryCache","HomePage","query","gql","json","root","ReactDOM","createRoot","document","getElementById","render","process","env","REACT_APP_API_KEY","REACT_APP_ENDPOINT","headers","Authorization"],"version":3,"file":"main.js.map","sourceRoot":"../"}